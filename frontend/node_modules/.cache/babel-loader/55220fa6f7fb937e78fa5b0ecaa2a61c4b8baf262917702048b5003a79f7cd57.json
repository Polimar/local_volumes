{"ast":null,"code":"import React,{useState,useEffect}from'react';import styled from'styled-components';import{useAuth}from'../contexts/AuthContext';import socketService from'../services/socketService';import ChatSidebar from'./ChatSidebar';import ChatWindow from'./ChatWindow';import api from'../services/api';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ChatContainer=styled.div`\n  display: flex;\n  height: 100vh;\n  width: 100%;\n  overflow: hidden;\n  background-color: var(--background-color);\n`;const EmptyStateContainer=styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: var(--chat-bg);\n  color: var(--text-secondary);\n  \n  h2 {\n    font-size: 24px;\n    margin-bottom: 16px;\n    color: var(--primary-color);\n  }\n  \n  p {\n    font-size: 16px;\n    max-width: 400px;\n    text-align: center;\n    line-height: 1.6;\n  }\n  \n  img {\n    width: 200px;\n    margin-bottom: 24px;\n    opacity: 0.8;\n  }\n`;const Chat=()=>{const{user}=useAuth();const[chats,setChats]=useState([]);const[activeChat,setActiveChat]=useState(null);const[messages,setMessages]=useState([]);const[loading,setLoading]=useState(true);// Carica le chat dell'utente\nuseEffect(()=>{const loadChats=async()=>{try{const response=await api.get('/chats');setChats(response.data);setLoading(false);}catch(error){console.error('Errore durante il caricamento delle chat:',error);setLoading(false);}};if(user){loadChats();}},[user]);// Carica i messaggi quando si seleziona una chat\nuseEffect(()=>{const loadMessages=async()=>{if(!activeChat)return;try{const response=await api.get(`/messages/${activeChat.id}`);setMessages(response.data);// Partecipa alla chat tramite socket\nsocketService.joinChat(activeChat.id);}catch(error){console.error('Errore durante il caricamento dei messaggi:',error);}};loadMessages();// Cleanup: lascia la chat precedente\nreturn()=>{if(activeChat){socketService.leaveChat(activeChat.id);}};},[activeChat]);// Gestisci i messaggi in tempo reale\nuseEffect(()=>{const handleNewMessage=message=>{if(message.chatId===(activeChat===null||activeChat===void 0?void 0:activeChat.id)){setMessages(prevMessages=>[...prevMessages,message]);// Aggiorna lastMessage nella lista delle chat\nsetChats(prevChats=>prevChats.map(chat=>chat.id===message.chatId?{...chat,lastMessage:message.content,lastMessageTime:message.createdAt}:chat));}};// Sottoscrivi agli eventi socket\nconst unsubscribe=socketService.onReceiveMessage(handleNewMessage);return()=>{unsubscribe();};},[activeChat]);// Seleziona una chat\nconst handleSelectChat=chat=>{setActiveChat(chat);};// Invia un messaggio\nconst handleSendMessage=async function(content){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'text';if(!activeChat||!content.trim())return;try{const messageData={content,type,chatId:activeChat.id,senderId:user.id};// Invia il messaggio tramite API\nconst response=await api.post('/messages',messageData);// Emetti l'evento tramite socket\nsocketService.sendMessage(response.data);// Aggiorna lo stato locale\nsetMessages(prevMessages=>[...prevMessages,response.data]);// Aggiorna l'ultima attività della chat\nsetChats(prevChats=>prevChats.map(chat=>chat.id===activeChat.id?{...chat,lastMessage:content,lastMessageTime:new Date().toISOString()}:chat));}catch(error){console.error('Errore durante l\\'invio del messaggio:',error);}};return/*#__PURE__*/_jsxs(ChatContainer,{children:[/*#__PURE__*/_jsx(ChatSidebar,{chats:chats,activeChat:activeChat,onSelectChat:handleSelectChat,loading:loading}),activeChat?/*#__PURE__*/_jsx(ChatWindow,{chat:activeChat,messages:messages,onSendMessage:handleSendMessage}):/*#__PURE__*/_jsxs(EmptyStateContainer,{children:[/*#__PURE__*/_jsx(\"img\",{src:\"/logo192.png\",alt:\"WaiChat Logo\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"Benvenuto su WaiChat\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Seleziona una chat per iniziare a messaggiare o crea una nuova conversazione. Puoi anche chattare con l'AI utilizzando il nostro assistente integrato!\"})]})]});};export default Chat;","map":{"version":3,"names":["React","useState","useEffect","styled","useAuth","socketService","ChatSidebar","ChatWindow","api","jsx","_jsx","jsxs","_jsxs","ChatContainer","div","EmptyStateContainer","Chat","user","chats","setChats","activeChat","setActiveChat","messages","setMessages","loading","setLoading","loadChats","response","get","data","error","console","loadMessages","id","joinChat","leaveChat","handleNewMessage","message","chatId","prevMessages","prevChats","map","chat","lastMessage","content","lastMessageTime","createdAt","unsubscribe","onReceiveMessage","handleSelectChat","handleSendMessage","type","arguments","length","undefined","trim","messageData","senderId","post","sendMessage","Date","toISOString","children","onSelectChat","onSendMessage","src","alt"],"sources":["/app/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useAuth } from '../contexts/AuthContext';\nimport socketService from '../services/socketService';\nimport ChatSidebar from './ChatSidebar';\nimport ChatWindow from './ChatWindow';\nimport api from '../services/api';\n\nconst ChatContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  width: 100%;\n  overflow: hidden;\n  background-color: var(--background-color);\n`;\n\nconst EmptyStateContainer = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: var(--chat-bg);\n  color: var(--text-secondary);\n  \n  h2 {\n    font-size: 24px;\n    margin-bottom: 16px;\n    color: var(--primary-color);\n  }\n  \n  p {\n    font-size: 16px;\n    max-width: 400px;\n    text-align: center;\n    line-height: 1.6;\n  }\n  \n  img {\n    width: 200px;\n    margin-bottom: 24px;\n    opacity: 0.8;\n  }\n`;\n\nconst Chat = () => {\n  const { user } = useAuth();\n  const [chats, setChats] = useState([]);\n  const [activeChat, setActiveChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  \n  // Carica le chat dell'utente\n  useEffect(() => {\n    const loadChats = async () => {\n      try {\n        const response = await api.get('/chats');\n        setChats(response.data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Errore durante il caricamento delle chat:', error);\n        setLoading(false);\n      }\n    };\n    \n    if (user) {\n      loadChats();\n    }\n  }, [user]);\n  \n  // Carica i messaggi quando si seleziona una chat\n  useEffect(() => {\n    const loadMessages = async () => {\n      if (!activeChat) return;\n      \n      try {\n        const response = await api.get(`/messages/${activeChat.id}`);\n        setMessages(response.data);\n        \n        // Partecipa alla chat tramite socket\n        socketService.joinChat(activeChat.id);\n      } catch (error) {\n        console.error('Errore durante il caricamento dei messaggi:', error);\n      }\n    };\n    \n    loadMessages();\n    \n    // Cleanup: lascia la chat precedente\n    return () => {\n      if (activeChat) {\n        socketService.leaveChat(activeChat.id);\n      }\n    };\n  }, [activeChat]);\n  \n  // Gestisci i messaggi in tempo reale\n  useEffect(() => {\n    const handleNewMessage = (message) => {\n      if (message.chatId === activeChat?.id) {\n        setMessages((prevMessages) => [...prevMessages, message]);\n        \n        // Aggiorna lastMessage nella lista delle chat\n        setChats((prevChats) => \n          prevChats.map((chat) => \n            chat.id === message.chatId \n              ? { \n                  ...chat, \n                  lastMessage: message.content,\n                  lastMessageTime: message.createdAt\n                } \n              : chat\n          )\n        );\n      }\n    };\n    \n    // Sottoscrivi agli eventi socket\n    const unsubscribe = socketService.onReceiveMessage(handleNewMessage);\n    \n    return () => {\n      unsubscribe();\n    };\n  }, [activeChat]);\n  \n  // Seleziona una chat\n  const handleSelectChat = (chat) => {\n    setActiveChat(chat);\n  };\n  \n  // Invia un messaggio\n  const handleSendMessage = async (content, type = 'text') => {\n    if (!activeChat || !content.trim()) return;\n    \n    try {\n      const messageData = {\n        content,\n        type,\n        chatId: activeChat.id,\n        senderId: user.id\n      };\n      \n      // Invia il messaggio tramite API\n      const response = await api.post('/messages', messageData);\n      \n      // Emetti l'evento tramite socket\n      socketService.sendMessage(response.data);\n      \n      // Aggiorna lo stato locale\n      setMessages((prevMessages) => [...prevMessages, response.data]);\n      \n      // Aggiorna l'ultima attività della chat\n      setChats((prevChats) => \n        prevChats.map((chat) => \n          chat.id === activeChat.id \n            ? { \n                ...chat, \n                lastMessage: content,\n                lastMessageTime: new Date().toISOString()\n              } \n            : chat\n        )\n      );\n    } catch (error) {\n      console.error('Errore durante l\\'invio del messaggio:', error);\n    }\n  };\n  \n  return (\n    <ChatContainer>\n      <ChatSidebar \n        chats={chats}\n        activeChat={activeChat}\n        onSelectChat={handleSelectChat}\n        loading={loading}\n      />\n      \n      {activeChat ? (\n        <ChatWindow \n          chat={activeChat}\n          messages={messages}\n          onSendMessage={handleSendMessage}\n        />\n      ) : (\n        <EmptyStateContainer>\n          <img src=\"/logo192.png\" alt=\"WaiChat Logo\" />\n          <h2>Benvenuto su WaiChat</h2>\n          <p>\n            Seleziona una chat per iniziare a messaggiare o crea una nuova conversazione.\n            Puoi anche chattare con l'AI utilizzando il nostro assistente integrato!\n          </p>\n        </EmptyStateContainer>\n      )}\n    </ChatContainer>\n  );\n};\n\nexport default Chat; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}