{"version":3,"file":"static/js/431.3c0ebd89.chunk.js","mappings":"+LAIA,MAAMA,EAAmBC,EAAAA,GAAOC,GAAG;;;;;;;;;;;eAWpBC,GAAUA,EAAMC,gBAAkB,OAAS;;EAIpDC,EAASJ,EAAAA,GAAOC,GAAG;;;;;;;EASnBI,EAAWL,EAAAA,GAAOC,GAAG;;;EAKrBK,EAASN,EAAAA,GAAOC,GAAG;;;;;;;;;;;EAanBM,EAAWP,EAAAA,GAAOC,GAAG;;EAIrBO,EAAUR,EAAAA,GAAOC,GAAG;;;EAKpBQ,EAAeT,EAAAA,GAAOU,MAAM;;;;;;;;;;EAY5BC,EAAYX,EAAAA,GAAOC,GAAG;;;EAKtBW,EAAcZ,EAAAA,GAAOa,KAAK;;;;;;;;;;;;;;;EAiB1BC,EAAWd,EAAAA,GAAOC,GAAG;;;;EAMrBc,EAAWf,EAAAA,GAAOC,GAAG;;;;;sBAKLC,GAASA,EAAMc,SAAW,sBAAwB;;;;;EAOlEC,EAAajB,EAAAA,GAAOC,GAAG;;;;sBAIPC,GAASA,EAAMgB,KAAO,sBAAwB;;;;;;;;EAU9DC,EAAWnB,EAAAA,GAAOC,GAAG;;;EAKrBmB,EAAWpB,EAAAA,GAAOC,GAAG;;;;;;EAQrBoB,EAAcrB,EAAAA,GAAOC,GAAG;;;;;;EAQxBqB,EAAWtB,EAAAA,GAAOC,GAAG;;;;;EAOrBsB,EAAavB,EAAAA,GAAOC,GAAG;;;;;;;;;;;;;;EAgBvBuB,EAAexB,EAAAA,GAAOC,GAAG;;;;;;EA2F/B,EAnFoBwB,IAAwD,IAAvD,MAAEC,EAAQ,GAAE,WAAEC,EAAU,aAAEC,EAAY,QAAEC,GAASJ,EACpE,MAAM,KAAEK,EAAI,OAAEC,IAAWC,EAAAA,EAAAA,MAClBC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,IAEzCC,EAAgBV,EAAMW,QAAOC,IAChBA,EAAKC,OAAuB,WAAdD,EAAKE,KAAoB,eAAiB,WACzDC,cAAcC,SAAST,EAAYQ,iBAG/CE,EAAeJ,GACdA,EACEA,EAAKK,MAAM,KAAKC,KAAIC,GAAKA,EAAE,KAAIC,KAAK,IAAIC,cAAcC,UAAU,EAAG,GADxD,IAIdC,EAAcC,IAClB,IAAKA,EAAW,MAAO,GAEvB,MAAMC,EAAO,IAAIC,KAAKF,GAChBG,EAAM,IAAID,KAEhB,OAAID,EAAKG,iBAAmBD,EAAIC,eACvBH,EAAKI,mBAAmB,GAAI,CAAEC,KAAM,UAAWC,OAAQ,YAGzDN,EAAKO,oBAAoB,EAGlC,OACEC,EAAAA,EAAAA,MAAC7D,EAAgB,CAAA8D,SAAA,EACfD,EAAAA,EAAAA,MAACxD,EAAM,CAAAyD,SAAA,EACLD,EAAAA,EAAAA,MAACvD,EAAQ,CAAAwD,SAAA,EACPC,EAAAA,EAAAA,KAACxD,EAAM,CAAAuD,SAAE/B,EAAOa,EAAYb,EAAKiC,UAAYjC,EAAKkC,UAAY,OAC9DF,EAAAA,EAAAA,KAACvD,EAAQ,CAAAsD,SAAE/B,EAAQA,EAAKiC,UAAYjC,EAAKkC,SAAY,eAEvDF,EAAAA,EAAAA,KAACtD,EAAO,CAAAqD,UACNC,EAAAA,EAAAA,KAACrD,EAAY,CAACwD,QAASlC,EAAO8B,UAC5BC,EAAAA,EAAAA,KAAA,QAAMI,KAAK,MAAM,aAAW,SAAQL,SAAC,yBAK3CC,EAAAA,EAAAA,KAACnD,EAAS,CAAAkD,UACRC,EAAAA,EAAAA,KAAClD,EAAW,CACV4B,KAAK,OACL2B,YAAY,gBACZC,MAAOnC,EACPoC,SAAWC,GAAMpC,EAAeoC,EAAEC,OAAOH,YAI7CN,EAAAA,EAAAA,KAAChD,EAAQ,CAAA+C,SACNhC,GACCiC,EAAAA,EAAAA,KAACtC,EAAY,CAAAqC,SAAC,wBACZzB,EAAcoC,OAAS,EACzBpC,EAAcS,KAAIP,IAChBsB,EAAAA,EAAAA,MAAC7C,EAAQ,CAEPC,SAAUW,GAAcA,EAAW8C,KAAOnC,EAAKmC,GAC/CR,QAASA,IAAMrC,EAAaU,GAAMuB,SAAA,EAElCC,EAAAA,EAAAA,KAAC7C,EAAU,CAACC,KAAoB,OAAdoB,EAAKE,KAAcqB,SACpB,OAAdvB,EAAKE,KAAgB,KAAOG,EAAYL,EAAKC,MAAQ,WAExDqB,EAAAA,EAAAA,MAACzC,EAAQ,CAAA0C,SAAA,EACPC,EAAAA,EAAAA,KAAC1C,EAAQ,CAAAyC,SAAEvB,EAAKC,OAAuB,WAAdD,EAAKE,KAAoB,eAA+B,OAAdF,EAAKE,KAAgB,gBAAkB,aAC1GsB,EAAAA,EAAAA,KAACzC,EAAW,CAAAwC,SAAEvB,EAAKoC,aAAe,wBAEnCpC,EAAKqC,kBACJb,EAAAA,EAAAA,KAACxC,EAAQ,CAAAuC,SAAEX,EAAWZ,EAAKqC,qBAZxBrC,EAAKmC,OAiBdb,EAAAA,EAAAA,MAACrC,EAAU,CAAAsC,SAAA,EACTC,EAAAA,EAAAA,KAAA,QAAMI,KAAK,MAAM,aAAW,QAAQU,MAAO,CAAEC,SAAU,QAAShB,SAAC,kBACjEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,qEAIQ,ECxPjBiB,EAAkB9E,EAAAA,GAAOC,GAAG;;;;;;;EAS5BG,EAASJ,EAAAA,GAAOC,GAAG;;;;;;EAQnBgB,EAAajB,EAAAA,GAAOC,GAAG;;;;sBAIPC,GAASA,EAAMgB,KAAO,sBAAwB;;;;;;;EAS9DC,EAAWnB,EAAAA,GAAOC,GAAG;;EAIrBmB,EAAWpB,EAAAA,GAAOC,GAAG;;EAIrB8E,EAAa/E,EAAAA,GAAOC,GAAG;;;EAKvB+E,EAAoBhF,EAAAA,GAAOC,GAAG;;;;;;EAQ9BgF,EAAejF,EAAAA,GAAOC,GAAG;;;iBAGdC,GAASA,EAAMgF,OAAS,WAAa;;;gBAGtChF,GAASA,EAAMgF,OAAS,WAAa;EAG/CC,EAAUnF,EAAAA,GAAOC,GAAG;;;sBAGJC,GACdA,EAAMgB,KAAa,oBAChBhB,EAAMgF,OAAS,sBAAwB;;;;;;8BAOpBhF,GAASA,EAAMgF,OAAS,OAAS;+BAChChF,GAASA,EAAMgF,OAAS,MAAQ;;;;iCAI9BhF,IAASA,EAAMgF,OAAS;kCACvBhF,IAASA,EAAMgF,OAAS;;;EAKpDE,EAAcpF,EAAAA,GAAOC,GAAG;;EAIxBoF,EAAcrF,EAAAA,GAAOC,GAAG;;;gBAGdC,GAASA,EAAMgF,OAAS,QAAU;;EAI5CI,EAAiBtF,EAAAA,GAAOC,GAAG;;;;;EAO3BsF,EAAevF,EAAAA,GAAOa,KAAK;;;;;;;;;;;;;;;EAiB3B2E,EAAaxF,EAAAA,GAAOU,MAAM;;;;;;;;;;;;;;;;;EAmB1Ba,EAAavB,EAAAA,GAAOC,GAAG;;;;;;;;;;;;;;EAwH7B,EAxGmBwB,IAA6C,IAA5C,KAAEa,EAAI,SAAEmD,EAAW,GAAE,cAAEC,GAAejE,EACxD,MAAM,KAAEK,IAASE,EAAAA,EAAAA,MACV2D,EAAaC,IAAkBzD,EAAAA,EAAAA,UAAS,IACzC0D,GAAiBC,EAAAA,EAAAA,QAAO,OAE9BC,EAAAA,EAAAA,YAAU,KACRC,GAAgB,GACf,CAACP,IAEJ,MAAMO,EAAiBA,KAAO,IAADC,EACL,QAAtBA,EAAAJ,EAAeK,eAAO,IAAAD,GAAtBA,EAAwBE,eAAe,CAAEC,SAAU,UAAW,EAY1DlD,EAAcC,IAClB,IAAKA,EAAW,MAAO,GAGvB,OADa,IAAIE,KAAKF,GACVK,mBAAmB,GAAI,CAAEC,KAAM,UAAWC,OAAQ,WAAY,EAQ5E,OAAKpB,GAYHsB,EAAAA,EAAAA,MAACkB,EAAe,CAAAjB,SAAA,EACdD,EAAAA,EAAAA,MAACxD,EAAM,CAAAyD,SAAA,EACLC,EAAAA,EAAAA,KAAC7C,EAAU,CAACC,KAAoB,OAAdoB,EAAKE,KAAcqB,SACpB,OAAdvB,EAAKE,KAAgB,MApBTD,EAoB4BD,EAAKC,MAAQ,OAnBvDA,EACEA,EAAKK,MAAM,KAAKC,KAAIC,GAAKA,EAAE,KAAIC,KAAK,IAAIC,cAAcC,UAAU,EAAG,GADxD,QAqBdW,EAAAA,EAAAA,MAACzC,EAAQ,CAAA0C,SAAA,EACPC,EAAAA,EAAAA,KAAC1C,EAAQ,CAAAyC,SACNvB,EAAKC,OAAuB,WAAdD,EAAKE,KAAoB,eAA+B,OAAdF,EAAKE,KAAgB,gBAAkB,aAElGsB,EAAAA,EAAAA,KAACiB,EAAU,CAAAlB,SACM,OAAdvB,EAAKE,KAAgB,gBAAkB,kBAK9CoB,EAAAA,EAAAA,MAACoB,EAAiB,CAAAnB,SAAA,CACK,IAApB4B,EAASjB,QACRZ,EAAAA,EAAAA,MAACrC,EAAU,CAAAsC,SAAA,EACTC,EAAAA,EAAAA,KAAA,QAAMI,KAAK,MAAM,aAAW,QAAQU,MAAO,CAAEC,SAAU,QAAShB,SAAC,kBACjEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,sDAGL4B,EAAS5C,KAAI,CAACwD,EAASC,KACrB,MAAMpB,EAASmB,EAAQE,YAAiB,OAAJzE,QAAI,IAAJA,OAAI,EAAJA,EAAM2C,IACpCvD,EAAqB,OAAdoB,EAAKE,OAAkB0C,EAEpC,OACEtB,EAAAA,EAAAA,MAACqB,EAAY,CAA2BC,OAAQA,EAAOrB,SAAA,EACrDC,EAAAA,EAAAA,KAACqB,EAAO,CAACD,OAAQA,EAAQhE,KAAMA,EAAK2C,UAClCC,EAAAA,EAAAA,KAACsB,EAAW,CAAAvB,SAAEwC,EAAQG,aAExB1C,EAAAA,EAAAA,KAACuB,EAAW,CAACH,OAAQA,EAAOrB,SACzBX,EAAWmD,EAAQI,eALLJ,EAAQ5B,IAAM6B,EAOlB,KAIrBxC,EAAAA,EAAAA,KAAA,OAAK4C,IAAKb,QAGZ/B,EAAAA,EAAAA,KAACwB,EAAc,CAAAzB,UACbD,EAAAA,EAAAA,MAAA,QAAM+C,SA3EerC,IACzBA,EAAEsC,iBAEGjB,EAAYkB,SAEjBnB,EAAcC,GACdC,EAAe,IAAG,EAqEqBhB,MAAO,CAAEkC,QAAS,OAAQC,MAAO,QAASlD,SAAA,EAC3EC,EAAAA,EAAAA,KAACyB,EAAY,CACX/C,KAAK,OACL2B,YAAY,yBACZC,MAAOuB,EACPtB,SAAWC,GAAMsB,EAAetB,EAAEC,OAAOH,UAE3CN,EAAAA,EAAAA,KAAC0B,EAAU,CAAChD,KAAK,SAASwE,UAAWrB,EAAYkB,OAAOhD,UACtDC,EAAAA,EAAAA,KAAA,QAAMI,KAAK,MAAM,aAAW,OAAML,SAAC,sBA5DzCC,EAAAA,EAAAA,KAACgB,EAAe,CAAAjB,UACdD,EAAAA,EAAAA,MAACrC,EAAU,CAAAsC,SAAA,EACTC,EAAAA,EAAAA,KAAA,QAAMI,KAAK,MAAM,aAAW,UAAUU,MAAO,CAAEC,SAAU,QAAShB,SAAC,kBACnEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,uDAVUtB,KAuED,E,aCzPtB,MAAM0E,EAAgBjH,EAAAA,GAAOC,GAAG;;;;;;EAQ1BiH,EAAsBlH,EAAAA,GAAOC,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqLtC,EAxJakH,KACX,MAAM,KAAErF,IAASE,EAAAA,EAAAA,MACVN,EAAO0F,IAAYjF,EAAAA,EAAAA,UAAS,KAC5BR,EAAY0F,IAAiBlF,EAAAA,EAAAA,UAAS,OACtCsD,EAAU6B,IAAenF,EAAAA,EAAAA,UAAS,KAClCN,EAAS0F,IAAcpF,EAAAA,EAAAA,WAAS,IAGvC4D,EAAAA,EAAAA,YAAU,KAYJjE,GAXc0F,WAChB,IACE,MAAMC,QAAiBC,EAAAA,EAAIC,IAAI,UAC/BP,EAASK,EAASG,MAClBL,GAAW,EACb,CAAE,MAAOM,GACPC,QAAQD,MAAM,4CAA6CA,GAC3DN,GAAW,EACb,GAIAQ,EACF,GACC,CAACjG,KAGJiE,EAAAA,EAAAA,YAAU,KACayB,WACnB,GAAK7F,EAEL,IACE,MAAM8F,QAAiBC,EAAAA,EAAIC,IAAI,aAAahG,EAAW8C,MACvD6C,EAAYG,EAASG,MAGrBI,EAAAA,EAAcC,SAAStG,EAAW8C,GACpC,CAAE,MAAOoD,GACPC,QAAQD,MAAM,8CAA+CA,EAC/D,GAGFK,GAGO,KACDvG,GACFqG,EAAAA,EAAcG,UAAUxG,EAAW8C,GACrC,IAED,CAAC9C,KAGJoE,EAAAA,EAAAA,YAAU,KACR,MAoBMqC,EAAcJ,EAAAA,EAAcK,kBApBRhC,IACpBA,EAAQiC,UAAqB,OAAV3G,QAAU,IAAVA,OAAU,EAAVA,EAAY8C,MACjC6C,GAAaiB,GAAiB,IAAIA,EAAclC,KAGhDe,GAAUoB,GACRA,EAAU3F,KAAKP,GACbA,EAAKmC,KAAO4B,EAAQiC,OAChB,IACKhG,EACHoC,YAAa2B,EAAQG,QACrB7B,gBAAiB0B,EAAQI,WAE3BnE,MAGV,IAMF,MAAO,KACL8F,GAAa,CACd,GACA,CAACzG,IA6CJ,OACEiC,EAAAA,EAAAA,MAACqD,EAAa,CAAApD,SAAA,EACZC,EAAAA,EAAAA,KAAC2E,EAAW,CACV/G,MAAOA,EACPC,WAAYA,EACZC,aA/CoBU,IACxB+E,EAAc/E,EAAK,EA+CfT,QAASA,IAGVF,GACCmC,EAAAA,EAAAA,KAAC4E,EAAU,CACTpG,KAAMX,EACN8D,SAAUA,EACVC,cAlDkB8B,eAAOhB,GAA4B,IAAnBhE,EAAImG,UAAAnE,OAAA,QAAAoE,IAAAD,UAAA,GAAAA,UAAA,GAAG,OAC/C,GAAKhH,GAAe6E,EAAQK,OAE5B,IACE,MAAMgC,EAAc,CAClBrC,UACAhE,OACA8F,OAAQ3G,EAAW8C,GACnB8B,SAAUzE,EAAK2C,IAIXgD,QAAiBC,EAAAA,EAAIoB,KAAK,YAAaD,GAG7Cb,EAAAA,EAAce,YAAYtB,EAASG,MAGnCN,GAAaiB,GAAiB,IAAIA,EAAcd,EAASG,QAGzDR,GAAUoB,GACRA,EAAU3F,KAAKP,GACbA,EAAKmC,KAAO9C,EAAW8C,GACnB,IACKnC,EACHoC,YAAa8B,EACb7B,iBAAiB,IAAItB,MAAO2F,eAE9B1G,KAGV,CAAE,MAAOuF,GACPC,QAAQD,MAAM,wCAA0CA,EAC1D,CACF,KAkBMjE,EAAAA,EAAAA,MAACsD,EAAmB,CAAArD,SAAA,EAClBC,EAAAA,EAAAA,KAAA,OAAKmF,IAAI,eAAeC,IAAI,kBAC5BpF,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0BACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gKAMO,C","sources":["components/ChatSidebar.js","components/ChatWindow.js","components/Chat.js"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useAuth } from '../contexts/AuthContext';\n\nconst SidebarContainer = styled.div`\n  width: 350px;\n  height: 100%;\n  background-color: var(--chat-bg);\n  border-right: 1px solid var(--border-color);\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    display: ${props => (props.isMobileVisible ? 'flex' : 'none')};\n  }\n`;\n\nconst Header = styled.div`\n  padding: 16px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: var(--chat-bg);\n  border-bottom: 1px solid var(--border-color);\n`;\n\nconst UserInfo = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Avatar = styled.div`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: var(--primary-color);\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  margin-right: 12px;\n`;\n\nconst UserName = styled.div`\n  font-weight: 600;\n`;\n\nconst Actions = styled.div`\n  display: flex;\n  gap: 16px;\n`;\n\nconst ActionButton = styled.button`\n  background: none;\n  border: none;\n  color: var(--text-secondary);\n  font-size: 20px;\n  cursor: pointer;\n  \n  &:hover {\n    color: var(--primary-color);\n  }\n`;\n\nconst SearchBar = styled.div`\n  padding: 12px 16px;\n  background-color: var(--chat-bg);\n`;\n\nconst SearchInput = styled.input`\n  width: 100%;\n  padding: 10px 16px;\n  border-radius: 20px;\n  border: none;\n  background-color: var(--background-color);\n  color: var(--text-color);\n  \n  &::placeholder {\n    color: var(--text-secondary);\n  }\n  \n  &:focus {\n    outline: none;\n  }\n`;\n\nconst ChatList = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 8px 0;\n`;\n\nconst ChatItem = styled.div`\n  padding: 12px 16px;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  background-color: ${props => props.isActive ? 'rgba(0, 0, 0, 0.05)' : 'transparent'};\n  \n  &:hover {\n    background-color: rgba(0, 0, 0, 0.05);\n  }\n`;\n\nconst ChatAvatar = styled.div`\n  width: 48px;\n  height: 48px;\n  border-radius: 50%;\n  background-color: ${props => props.isAI ? 'var(--accent-color)' : 'var(--primary-color)'};\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  margin-right: 16px;\n  flex-shrink: 0;\n`;\n\nconst ChatInfo = styled.div`\n  flex: 1;\n  min-width: 0;\n`;\n\nconst ChatName = styled.div`\n  font-weight: 600;\n  margin-bottom: 4px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst LastMessage = styled.div`\n  font-size: 14px;\n  color: var(--text-secondary);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst ChatTime = styled.div`\n  font-size: 12px;\n  color: var(--text-secondary);\n  margin-left: 8px;\n  white-space: nowrap;\n`;\n\nconst EmptyState = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  padding: 20px;\n  text-align: center;\n  color: var(--text-secondary);\n  \n  p {\n    margin-top: 12px;\n    font-size: 14px;\n  }\n`;\n\nconst LoadingState = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  color: var(--text-secondary);\n`;\n\nconst ChatSidebar = ({ chats = [], activeChat, onSelectChat, loading }) => {\n  const { user, logout } = useAuth();\n  const [searchQuery, setSearchQuery] = useState('');\n  \n  const filteredChats = chats.filter(chat => {\n    const chatName = chat.name || (chat.type === 'direct' ? 'Chat Diretta' : 'Gruppo');\n    return chatName.toLowerCase().includes(searchQuery.toLowerCase());\n  });\n  \n  const getInitials = (name) => {\n    if (!name) return '?';\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2);\n  };\n  \n  const formatTime = (timestamp) => {\n    if (!timestamp) return '';\n    \n    const date = new Date(timestamp);\n    const now = new Date();\n    \n    if (date.toDateString() === now.toDateString()) {\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    }\n    \n    return date.toLocaleDateString();\n  };\n  \n  return (\n    <SidebarContainer>\n      <Header>\n        <UserInfo>\n          <Avatar>{user ? getInitials(user.fullName || user.username) : '?'}</Avatar>\n          <UserName>{user ? (user.fullName || user.username) : 'Utente'}</UserName>\n        </UserInfo>\n        <Actions>\n          <ActionButton onClick={logout}>\n            <span role=\"img\" aria-label=\"Logout\">🚪</span>\n          </ActionButton>\n        </Actions>\n      </Header>\n      \n      <SearchBar>\n        <SearchInput \n          type=\"text\" \n          placeholder=\"Cerca chat...\" \n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n        />\n      </SearchBar>\n      \n      <ChatList>\n        {loading ? (\n          <LoadingState>Caricamento chat...</LoadingState>\n        ) : filteredChats.length > 0 ? (\n          filteredChats.map(chat => (\n            <ChatItem \n              key={chat.id} \n              isActive={activeChat && activeChat.id === chat.id}\n              onClick={() => onSelectChat(chat)}\n            >\n              <ChatAvatar isAI={chat.type === 'ai'}>\n                {chat.type === 'ai' ? 'AI' : getInitials(chat.name || 'Chat')}\n              </ChatAvatar>\n              <ChatInfo>\n                <ChatName>{chat.name || (chat.type === 'direct' ? 'Chat Diretta' : chat.type === 'ai' ? 'Assistente AI' : 'Gruppo')}</ChatName>\n                <LastMessage>{chat.lastMessage || 'Nessun messaggio'}</LastMessage>\n              </ChatInfo>\n              {chat.lastMessageTime && (\n                <ChatTime>{formatTime(chat.lastMessageTime)}</ChatTime>\n              )}\n            </ChatItem>\n          ))\n        ) : (\n          <EmptyState>\n            <span role=\"img\" aria-label=\"Empty\" style={{ fontSize: '32px' }}>💬</span>\n            <p>Nessuna chat disponibile. Inizia una nuova conversazione!</p>\n          </EmptyState>\n        )}\n      </ChatList>\n    </SidebarContainer>\n  );\n};\n\nexport default ChatSidebar; ","import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useAuth } from '../contexts/AuthContext';\n\nconst WindowContainer = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background-color: var(--background-color);\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst Header = styled.div`\n  padding: 16px;\n  display: flex;\n  align-items: center;\n  background-color: var(--chat-bg);\n  border-bottom: 1px solid var(--border-color);\n`;\n\nconst ChatAvatar = styled.div`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: ${props => props.isAI ? 'var(--accent-color)' : 'var(--primary-color)'};\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  margin-right: 16px;\n`;\n\nconst ChatInfo = styled.div`\n  flex: 1;\n`;\n\nconst ChatName = styled.div`\n  font-weight: 600;\n`;\n\nconst ChatStatus = styled.div`\n  font-size: 13px;\n  color: var(--text-secondary);\n`;\n\nconst MessagesContainer = styled.div`\n  flex: 1;\n  padding: 16px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst MessageGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: ${props => props.isSent ? 'flex-end' : 'flex-start'};\n  margin-bottom: 16px;\n  max-width: 80%;\n  align-self: ${props => props.isSent ? 'flex-end' : 'flex-start'};\n`;\n\nconst Message = styled.div`\n  padding: 10px 16px;\n  border-radius: 16px;\n  background-color: ${props => {\n    if (props.isAI) return 'var(--ai-message)';\n    return props.isSent ? 'var(--message-sent)' : 'var(--message-received)';\n  }};\n  margin-bottom: 4px;\n  box-shadow: 0 1px 2px var(--shadow-color);\n  position: relative;\n  \n  &:first-child {\n    border-top-left-radius: ${props => props.isSent ? '16px' : '4px'};\n    border-top-right-radius: ${props => props.isSent ? '4px' : '16px'};\n  }\n  \n  &:last-child {\n    border-bottom-left-radius: ${props => props.isSent ? '16px' : '16px'};\n    border-bottom-right-radius: ${props => props.isSent ? '16px' : '16px'};\n    margin-bottom: 0;\n  }\n`;\n\nconst MessageText = styled.div`\n  word-break: break-word;\n`;\n\nconst MessageTime = styled.div`\n  font-size: 11px;\n  color: var(--text-secondary);\n  text-align: ${props => props.isSent ? 'right' : 'left'};\n  margin-top: 4px;\n`;\n\nconst InputContainer = styled.div`\n  padding: 16px;\n  background-color: var(--chat-bg);\n  display: flex;\n  align-items: center;\n`;\n\nconst MessageInput = styled.input`\n  flex: 1;\n  padding: 12px 16px;\n  border-radius: 24px;\n  border: none;\n  background-color: var(--background-color);\n  color: var(--text-color);\n  \n  &::placeholder {\n    color: var(--text-secondary);\n  }\n  \n  &:focus {\n    outline: none;\n  }\n`;\n\nconst SendButton = styled.button`\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: var(--primary-color);\n  color: white;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 12px;\n  cursor: pointer;\n  border: none;\n  \n  &:disabled {\n    background-color: var(--text-secondary);\n    cursor: not-allowed;\n  }\n`;\n\nconst EmptyState = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  padding: 20px;\n  text-align: center;\n  color: var(--text-secondary);\n  \n  p {\n    margin-top: 12px;\n    font-size: 14px;\n  }\n`;\n\nconst ChatWindow = ({ chat, messages = [], onSendMessage }) => {\n  const { user } = useAuth();\n  const [messageText, setMessageText] = useState('');\n  const messagesEndRef = useRef(null);\n  \n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  \n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n  \n  const handleSendMessage = (e) => {\n    e.preventDefault();\n    \n    if (!messageText.trim()) return;\n    \n    onSendMessage(messageText);\n    setMessageText('');\n  };\n  \n  const formatTime = (timestamp) => {\n    if (!timestamp) return '';\n    \n    const date = new Date(timestamp);\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  };\n  \n  const getInitials = (name) => {\n    if (!name) return '?';\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2);\n  };\n  \n  if (!chat) {\n    return (\n      <WindowContainer>\n        <EmptyState>\n          <span role=\"img\" aria-label=\"Welcome\" style={{ fontSize: '48px' }}>👋</span>\n          <p>Seleziona una chat per iniziare a messaggiare</p>\n        </EmptyState>\n      </WindowContainer>\n    );\n  }\n  \n  return (\n    <WindowContainer>\n      <Header>\n        <ChatAvatar isAI={chat.type === 'ai'}>\n          {chat.type === 'ai' ? 'AI' : getInitials(chat.name || 'Chat')}\n        </ChatAvatar>\n        <ChatInfo>\n          <ChatName>\n            {chat.name || (chat.type === 'direct' ? 'Chat Diretta' : chat.type === 'ai' ? 'Assistente AI' : 'Gruppo')}\n          </ChatName>\n          <ChatStatus>\n            {chat.type === 'ai' ? 'Assistente AI' : 'Online'}\n          </ChatStatus>\n        </ChatInfo>\n      </Header>\n      \n      <MessagesContainer>\n        {messages.length === 0 ? (\n          <EmptyState>\n            <span role=\"img\" aria-label=\"Start\" style={{ fontSize: '32px' }}>💬</span>\n            <p>Inizia la conversazione inviando un messaggio!</p>\n          </EmptyState>\n        ) : (\n          messages.map((message, index) => {\n            const isSent = message.senderId === user?.id;\n            const isAI = chat.type === 'ai' && !isSent;\n            \n            return (\n              <MessageGroup key={message.id || index} isSent={isSent}>\n                <Message isSent={isSent} isAI={isAI}>\n                  <MessageText>{message.content}</MessageText>\n                </Message>\n                <MessageTime isSent={isSent}>\n                  {formatTime(message.createdAt)}\n                </MessageTime>\n              </MessageGroup>\n            );\n          })\n        )}\n        <div ref={messagesEndRef} />\n      </MessagesContainer>\n      \n      <InputContainer>\n        <form onSubmit={handleSendMessage} style={{ display: 'flex', width: '100%' }}>\n          <MessageInput\n            type=\"text\"\n            placeholder=\"Scrivi un messaggio...\"\n            value={messageText}\n            onChange={(e) => setMessageText(e.target.value)}\n          />\n          <SendButton type=\"submit\" disabled={!messageText.trim()}>\n            <span role=\"img\" aria-label=\"Send\">➤</span>\n          </SendButton>\n        </form>\n      </InputContainer>\n    </WindowContainer>\n  );\n};\n\nexport default ChatWindow; ","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useAuth } from '../contexts/AuthContext';\nimport socketService from '../services/socketService';\nimport ChatSidebar from './ChatSidebar';\nimport ChatWindow from './ChatWindow';\nimport api from '../services/api';\n\nconst ChatContainer = styled.div`\n  display: flex;\n  height: 100vh;\n  width: 100%;\n  overflow: hidden;\n  background-color: var(--background-color);\n`;\n\nconst EmptyStateContainer = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: var(--chat-bg);\n  color: var(--text-secondary);\n  \n  h2 {\n    font-size: 24px;\n    margin-bottom: 16px;\n    color: var(--primary-color);\n  }\n  \n  p {\n    font-size: 16px;\n    max-width: 400px;\n    text-align: center;\n    line-height: 1.6;\n  }\n  \n  img {\n    width: 200px;\n    margin-bottom: 24px;\n    opacity: 0.8;\n  }\n`;\n\nconst Chat = () => {\n  const { user } = useAuth();\n  const [chats, setChats] = useState([]);\n  const [activeChat, setActiveChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  \n  // Carica le chat dell'utente\n  useEffect(() => {\n    const loadChats = async () => {\n      try {\n        const response = await api.get('/chats');\n        setChats(response.data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Errore durante il caricamento delle chat:', error);\n        setLoading(false);\n      }\n    };\n    \n    if (user) {\n      loadChats();\n    }\n  }, [user]);\n  \n  // Carica i messaggi quando si seleziona una chat\n  useEffect(() => {\n    const loadMessages = async () => {\n      if (!activeChat) return;\n      \n      try {\n        const response = await api.get(`/messages/${activeChat.id}`);\n        setMessages(response.data);\n        \n        // Partecipa alla chat tramite socket\n        socketService.joinChat(activeChat.id);\n      } catch (error) {\n        console.error('Errore durante il caricamento dei messaggi:', error);\n      }\n    };\n    \n    loadMessages();\n    \n    // Cleanup: lascia la chat precedente\n    return () => {\n      if (activeChat) {\n        socketService.leaveChat(activeChat.id);\n      }\n    };\n  }, [activeChat]);\n  \n  // Gestisci i messaggi in tempo reale\n  useEffect(() => {\n    const handleNewMessage = (message) => {\n      if (message.chatId === activeChat?.id) {\n        setMessages((prevMessages) => [...prevMessages, message]);\n        \n        // Aggiorna lastMessage nella lista delle chat\n        setChats((prevChats) => \n          prevChats.map((chat) => \n            chat.id === message.chatId \n              ? { \n                  ...chat, \n                  lastMessage: message.content,\n                  lastMessageTime: message.createdAt\n                } \n              : chat\n          )\n        );\n      }\n    };\n    \n    // Sottoscrivi agli eventi socket\n    const unsubscribe = socketService.onReceiveMessage(handleNewMessage);\n    \n    return () => {\n      unsubscribe();\n    };\n  }, [activeChat]);\n  \n  // Seleziona una chat\n  const handleSelectChat = (chat) => {\n    setActiveChat(chat);\n  };\n  \n  // Invia un messaggio\n  const handleSendMessage = async (content, type = 'text') => {\n    if (!activeChat || !content.trim()) return;\n    \n    try {\n      const messageData = {\n        content,\n        type,\n        chatId: activeChat.id,\n        senderId: user.id\n      };\n      \n      // Invia il messaggio tramite API\n      const response = await api.post('/messages', messageData);\n      \n      // Emetti l'evento tramite socket\n      socketService.sendMessage(response.data);\n      \n      // Aggiorna lo stato locale\n      setMessages((prevMessages) => [...prevMessages, response.data]);\n      \n      // Aggiorna l'ultima attività della chat\n      setChats((prevChats) => \n        prevChats.map((chat) => \n          chat.id === activeChat.id \n            ? { \n                ...chat, \n                lastMessage: content,\n                lastMessageTime: new Date().toISOString()\n              } \n            : chat\n        )\n      );\n    } catch (error) {\n      console.error('Errore durante l\\'invio del messaggio:', error);\n    }\n  };\n  \n  return (\n    <ChatContainer>\n      <ChatSidebar \n        chats={chats}\n        activeChat={activeChat}\n        onSelectChat={handleSelectChat}\n        loading={loading}\n      />\n      \n      {activeChat ? (\n        <ChatWindow \n          chat={activeChat}\n          messages={messages}\n          onSendMessage={handleSendMessage}\n        />\n      ) : (\n        <EmptyStateContainer>\n          <img src=\"/logo192.png\" alt=\"WaiChat Logo\" />\n          <h2>Benvenuto su WaiChat</h2>\n          <p>\n            Seleziona una chat per iniziare a messaggiare o crea una nuova conversazione.\n            Puoi anche chattare con l'AI utilizzando il nostro assistente integrato!\n          </p>\n        </EmptyStateContainer>\n      )}\n    </ChatContainer>\n  );\n};\n\nexport default Chat; "],"names":["SidebarContainer","styled","div","props","isMobileVisible","Header","UserInfo","Avatar","UserName","Actions","ActionButton","button","SearchBar","SearchInput","input","ChatList","ChatItem","isActive","ChatAvatar","isAI","ChatInfo","ChatName","LastMessage","ChatTime","EmptyState","LoadingState","_ref","chats","activeChat","onSelectChat","loading","user","logout","useAuth","searchQuery","setSearchQuery","useState","filteredChats","filter","chat","name","type","toLowerCase","includes","getInitials","split","map","n","join","toUpperCase","substring","formatTime","timestamp","date","Date","now","toDateString","toLocaleTimeString","hour","minute","toLocaleDateString","_jsxs","children","_jsx","fullName","username","onClick","role","placeholder","value","onChange","e","target","length","id","lastMessage","lastMessageTime","style","fontSize","WindowContainer","ChatStatus","MessagesContainer","MessageGroup","isSent","Message","MessageText","MessageTime","InputContainer","MessageInput","SendButton","messages","onSendMessage","messageText","setMessageText","messagesEndRef","useRef","useEffect","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","message","index","senderId","content","createdAt","ref","onSubmit","preventDefault","trim","display","width","disabled","ChatContainer","EmptyStateContainer","Chat","setChats","setActiveChat","setMessages","setLoading","async","response","api","get","data","error","console","loadChats","socketService","joinChat","loadMessages","leaveChat","unsubscribe","onReceiveMessage","chatId","prevMessages","prevChats","ChatSidebar","ChatWindow","arguments","undefined","messageData","post","sendMessage","toISOString","src","alt"],"sourceRoot":""}